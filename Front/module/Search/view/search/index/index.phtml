<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <title>ELK Filesearch</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f2f2f2;
    }

    #search-container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    #search-box {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      width: 400px;
      display: flex;
      flex-direction: column;
    }

    #search-input {
      flex: 1;
      padding: 5px;
      border: none;
      outline: none;
    }

    #search-button {
      background-color: #4285f4;
      color: #fff;
      border: none;
      border-radius: 8px;
      padding: 6px 12px;
      cursor: pointer;
      margin-top: 8px;
    }

    #suggestions {
      border: 1px solid #ccc;
      border-radius: 8px;
      margin-top: 8px;
      display: none;
      max-height: 150px;
      overflow-y: auto;
      background-color: #fff;
    }

    .suggestion {
      padding: 8px;
      cursor: pointer;
    }

    .suggestion:hover {
      background-color: #f0f0f0;
    }

    .search-bar {
      width: auto;
      background-color: #bbb;
      padding: 10px;
      text-align: center;
      min-height: 65px;
      border-radius: 15px;
    }

    .settings-button {
      float: left;
      padding: 8px 15px;
      background-color: #696969;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .settings-button:hover {
      background-color: #a9a9a9;
    }
  </style>
</head>

<body>
  <div class="search-bar">
    <button class="settings-button" data-toggle="modal" data-target="#urlModal">Ajustes</button>
  </div>
  <div id="search-container">
    <div id="search-box">
      <input type="text" id="search-input" placeholder="File search">
      <div id="suggestions"></div>
      <button type="button" id="search-button">Buscar <i class="fa fa-search"></i></button>
    </div>
  </div>
  <!-- Modal -->
  <div class="modal fade" id="urlModal" tabindex="-1" role="dialog" aria-labelledby="urlModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="urlModalLabel">Add files location</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <input type="text" class="form-control mb-2" id="urlInput" placeholder="Enter URL">
          <button type="button" class="btn btn-success" id="addUrlButton">Add URL</button>
          <div id="resultDiv"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>

        </div>
      </div>
    </div>
  </div>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script>
    const searchInput = document.getElementById('search-input');
    const suggestionsContainer = document.getElementById('suggestions');
    const searchButton = document.getElementById('search-button');
    const addUrlButton = document.getElementById('addUrlButton');

    addUrlButton.addEventListener('click', () => {

      let path = document.getElementById('urlInput').value;

      fetch('/search/add-path', {
          method: 'POST',
          body: JSON.stringify({
            path: path
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          console.log('Server response:', data);
        })
        .catch(error => {
          console.error('Error:', error);
        });
    })
    searchButton.addEventListener('click', () => {

      window.location.href = "/search/result?q=" + searchInput.value;
    });

    searchInput.addEventListener('input', () => {
      const inputText = searchInput.value.trim();

      if (inputText.length > 0) {
        fetch(`/search/search?q=${inputText}`)
          .then(response => response.json())
          .then(data => {
            const hits = data.hits.hits;
            const suggestions = hits.map(hit => hit._source.title);

            suggestionsContainer.innerHTML = '';
            suggestions.forEach(suggestion => {
              const suggestionElement = document.createElement('div');
              suggestionElement.className = 'suggestion';
              suggestionElement.textContent = suggestion;
              suggestionElement.addEventListener('click', () => {
                searchInput.value = suggestion;
                suggestionsContainer.innerHTML = '';
              });
              suggestionsContainer.appendChild(suggestionElement);
            });

            suggestionsContainer.style.display = 'block';
          })
          .catch(error => {
            console.error('Error fetching data:', error);
          });
      } else {
        suggestionsContainer.innerHTML = '';
        suggestionsContainer.style.display = 'none';
      }
    });

    searchInput.addEventListener('blur', () => {
      setTimeout(() => {
        suggestionsContainer.style.display = 'none';
      }, 200);
    });

    const createDeleteButton = (path) => {
      const deleteButton = document.createElement('button');
      deleteButton.textContent = 'Delete';
      deleteButton.className = 'btn btn-danger btn-sm ml-2';

      deleteButton.addEventListener('click', () => {
        // Perform delete action or show confirmation dialog
        // For demonstration purposes, just remove the path element
        const pathElement = deleteButton.parentNode;
        pathElement.parentNode.removeChild(pathElement);
      });

      return deleteButton;
    }

    // Function to fetch and populate the list of paths
    const fetchAndPopulatePaths = () => {
      fetch('/search/show-path')
        .then(response => response.json())
        .then(data => {
          if (data.paths) {
            const resultDiv = document.getElementById('resultDiv');
            resultDiv.innerHTML = ''; // Clear previous results

            data.paths.forEach(path => {
              const pathElement = document.createElement('p');
              pathElement.textContent = path;

              const deleteButton = createDeleteButton(path);
              pathElement.appendChild(deleteButton);

              resultDiv.appendChild(pathElement);
            });

            // Show the modal after populating the paths
            pathModal.show();
          }
        })
        .catch(error => {
          console.error('An error occurred:', error);
        });
    }

    // ... Previous event listener for modal show ...
    const pathModal = new bootstrap.Modal(document.getElementById('urlModal'));
    // Listen for modal hide event to clear results when the modal is closed
    pathModal.addEventListener('hide.bs.modal', () => {
      const resultDiv = document.getElementById('resultDiv');
      resultDiv.innerHTML = ''; // Clear the results when the modal is closed
    });

    pathModal.addEventListener('show.bs.modal', fetchAndPopulatePaths);
    
  </script>
</body>

</html>